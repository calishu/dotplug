name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches-ignore: []

jobs:
  cmake-build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Prevent "Processing triggers for man-db" post-install hook
        run: sudo rm /var/lib/man-db/auto-update

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            cmake \
            libgit2-dev \
            libcli11-dev \
            libtomlplusplus-dev

      - name: Configure CMake
        run: cmake -S. -Bbuild

      - name: Build project
        run: cmake --build build -j$(nproc)

      # note: this uploads a dynamic executable, so systems you run it on need our dependencies installed.
      # if we want, we can also build a static executable to avoid the above problem.
      # this will take more build system work, though.
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dotplug-cmake
          path: |
            build/dotplug

  meson-build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Prevent "Processing triggers for man-db" post-install hook
        run: sudo rm /var/lib/man-db/auto-update

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            python3-pip \
            python3-setuptools \
            ninja-build

      - name: Install Conan and Meson
        run: pip3 install --upgrade conan meson

      - name: Configure Conan
        run: conan profile detect --force

      - name: Cache conan packages
        uses: actions/cache@v4
        with:
          path: ~/.conan2
          key: ${{ runner.os }}-conan-${{ hashFiles('conanfile.*') }}
          restore-keys: ${{ runner.os }}-conan-

      - name: Install dependencies with Conan
        run: conan install . --output-folder=build --build=missing

      - name: Configure Meson
        run: |
          source build/conanbuild.sh
          meson setup build --native-file=build/conan_meson_native.ini

      - name: Build Project
        run: |
          source build/conanrun.sh
          meson compile -C build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dotplug-meson
          path: |
            build/dotplug

  format-check:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Prevent "Processing triggers for man-db" post-install hook
      run: sudo rm /var/lib/man-db/auto-update

    - name: Add LLVM repo for clang-format 19+
      run: |
        wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
        sudo bash -c 'echo "deb http://apt.llvm.org/jammy/ llvm-toolchain-jammy-19 main" > /etc/apt/sources.list.d/llvm.list'
        sudo apt-get update

    - name: Install clang-format
      run: sudo apt-get install -y clang-format-19

    - name: Run clang-format check
      id: clangformat
      continue-on-error: true
      run: |
        if git ls-files '*.cpp' '*.hpp' '*.h' | xargs clang-format-19 --dry-run --Werror; then
          echo "clang-format passed"
          echo "status=passed" >> $GITHUB_OUTPUT
        else
          echo "clang-format failed"
          echo "status=failed" >> $GITHUB_OUTPUT
        fi

    - name: Comment on PR if clang-format failed
      if: ${{ github.event_name == 'pull_request' && steps.clangformat.outputs.status == 'failed' }}
      uses: peter-evans/create-or-update-comment@v2
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        issue-number: ${{ github.event.pull_request.number }}
        body: |
          > [!CAUTION]
          > **clang-format** says that your changes are not formatted correctly.
          > Please run the [`format.sh`](https://github.com/calishu/dotplug/blob/main/format.sh) file, or use this command:
          > ```bash
          > find src include -name '*.cpp' -o -name '*.hpp' | xargs clang-format -i
          > ```

    - name: Fail job if clang-format failed
      if: steps.clangformat.outputs.status == 'failed'
      run: exit 1
